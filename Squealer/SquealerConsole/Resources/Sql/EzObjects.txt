
go

declare @ezdrop varchar(max) =
(
	select string_agg(
		'drop '
		+case o.type
			when 'V' then 'view'
			when 'P' then 'procedure'
			when 'FN' then 'function'
		end
		+ concat(' [',s.name,'].[',o.name,']')
			,'; ')
		+ '; drop schema {Schema}'
	from sys.objects o
	join sys.schemas s
		on s.schema_id = o.schema_id
	where s.name = '{Schema}'
)
if @ezdrop is not null
	exec (@ezdrop)

go

if schema_id('{Schema}') is null
	exec ('create schema {Schema}')

go

create view {Schema}.objects as
select
	concat('[',s.name,'].[',o.name,']') as object_name
	,s.schema_id
	,o.object_id
	,s.name as schema_name
	,o.name as name
	,o.type
	,o.type_desc
	,concat('[',db_name(),']','.','[',s.name,']','.','[',o.name,']') as fqn
	,'drop '
	+ case
		when o.type = 'P' then 'PROCEDURE'
		when o.type = 'U' then 'TABLE'
		when o.type = 'FN' then 'FUNCTION'
		else o.type_desc
	end
	+ concat(' [',s.name,'].[',o.name,'];') collate SQL_Latin1_General_CP1_CI_AS as sql_drop_object
from
	sys.objects o
join
	sys.schemas s
	on s.schema_id = o.schema_id

go

create view {Schema}.tables as
select
	o.object_name as table_name
	,o.schema_id
	,o.object_id
	,o.schema_name
	,o.name as name
	,o.type
	,o.type_desc
	,o.fqn
	,o.sql_drop_object
	,(select string_agg(concat('[',c.name,']'),',') within group (order by c.column_id ) from sys.columns c where c.object_id = t.object_id) as column_list
from
	sys.tables t
join
	{Schema}.objects o
	on o.object_id = t.object_id
go

create view {Schema}.views as
select
	o.object_name as view_name
	,o.schema_id
	,o.object_id
	,o.schema_name
	,o.name
	,o.type
	,o.type_desc
	,o.fqn
	,o.sql_drop_object
	,(select string_agg(concat('[',c.name,']'),',') within group (order by c.column_id ) from sys.columns c where c.object_id = t.object_id) as column_list
from
	sys.views t
join
	{Schema}.objects o
	on o.object_id = t.object_id

go

create function {Schema}.rightint
(
@s as varchar(1000)
)
returns int
as
begin

declare @i int = len(@s);

while isnumeric(right(@s,@i)) = 0 and @i > 0
	set @i = @i - 1

if isnumeric(right(@s,@i)) = 0
	set @i = 0
else
	set @i = right(@s,@i)

return @i
end

go

create view {Schema}.indexcolumns as
select
	i.name as index_name
	,i.index_id
	,t.schema_id
	,t.object_id
	,t.schema_name
	,t.table_name
	,ic.index_column_id
	,c.name as column_name
	,ic.column_id
	,ic.is_included_column
from
	sys.index_columns ic
join
	sys.indexes i
	on i.object_id = ic.object_id
	and i.index_id = ic.index_id
join
	sys.columns c
	on c.object_id = ic.object_id
	and c.column_id = ic.column_id
join
	{Schema}.tables t
	on t.object_id = ic.object_id

go

create view {Schema}.indexes as
select
	i.name as index_name
	,t.table_name
	,i.type
	,i.type_desc
	,i.index_id
	,t.object_id
	,t.type as object_type
	,t.type_desc as object_type_desc
	,(
		select
			string_agg(c.column_name,',') within group (order by c.column_id)
		from
			{Schema}.indexcolumns c
		where
			c.index_id = i.index_id
	) as index_columns

from
	sys.indexes i
join
	{Schema}.tables t
	on t.object_id = i.object_id
where
	i.type > 0

go
